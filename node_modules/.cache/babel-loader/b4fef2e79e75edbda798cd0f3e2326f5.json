{"ast":null,"code":"'use strict';\n\nvar extend = require('xtend');\n\nmodule.exports = function (req) {\n  var xhr = req.xhr;\n  var props = {\n    request: req,\n    xhr: xhr\n  }; // Try to create the response from the request. If the request was aborted,\n  // accesssing properties of the XHR may throw an error, so we wrap in a\n  // try/catch.\n\n  try {\n    var lines,\n        i,\n        m,\n        headers = {};\n\n    if (xhr.getAllResponseHeaders) {\n      lines = xhr.getAllResponseHeaders().split('\\n');\n\n      for (i = 0; i < lines.length; i++) {\n        if (m = lines[i].match(/\\s*([^\\s]+):\\s+([^\\s]+)/)) {\n          headers[m[1]] = m[2];\n        }\n      }\n    }\n\n    props = extend(props, {\n      status: xhr.status,\n      contentType: xhr.contentType || xhr.getResponseHeader && xhr.getResponseHeader('Content-Type'),\n      headers: headers,\n      text: xhr.responseText,\n      body: xhr.response || xhr.responseText\n    });\n  } catch (err) {}\n\n  return props;\n};","map":{"version":3,"sources":["C:/Users/GodFather/Pictures/ecovia/client/node_modules/httpplease/lib/utils/extractResponseProps.js"],"names":["extend","require","module","exports","req","xhr","props","request","lines","i","m","headers","getAllResponseHeaders","split","length","match","status","contentType","getResponseHeader","text","responseText","body","response","err"],"mappings":"AAAA;;AAEA,IAAIA,MAAM,GAAGC,OAAO,CAAC,OAAD,CAApB;;AAEAC,MAAM,CAACC,OAAP,GAAiB,UAASC,GAAT,EAAc;AAC7B,MAAIC,GAAG,GAAGD,GAAG,CAACC,GAAd;AACA,MAAIC,KAAK,GAAG;AAACC,IAAAA,OAAO,EAAEH,GAAV;AAAeC,IAAAA,GAAG,EAAEA;AAApB,GAAZ,CAF6B,CAI7B;AACA;AACA;;AACA,MAAI;AACF,QAAIG,KAAJ;AAAA,QAAWC,CAAX;AAAA,QAAcC,CAAd;AAAA,QAAiBC,OAAO,GAAG,EAA3B;;AACA,QAAIN,GAAG,CAACO,qBAAR,EAA+B;AAC7BJ,MAAAA,KAAK,GAAGH,GAAG,CAACO,qBAAJ,GAA4BC,KAA5B,CAAkC,IAAlC,CAAR;;AACA,WAAKJ,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGD,KAAK,CAACM,MAAtB,EAA8BL,CAAC,EAA/B,EAAmC;AACjC,YAAKC,CAAC,GAAGF,KAAK,CAACC,CAAD,CAAL,CAASM,KAAT,CAAe,yBAAf,CAAT,EAAqD;AACnDJ,UAAAA,OAAO,CAACD,CAAC,CAAC,CAAD,CAAF,CAAP,GAAgBA,CAAC,CAAC,CAAD,CAAjB;AACD;AACF;AACF;;AAEDJ,IAAAA,KAAK,GAAGN,MAAM,CAACM,KAAD,EAAQ;AACpBU,MAAAA,MAAM,EAAEX,GAAG,CAACW,MADQ;AAEpBC,MAAAA,WAAW,EAAEZ,GAAG,CAACY,WAAJ,IAAoBZ,GAAG,CAACa,iBAAJ,IAAyBb,GAAG,CAACa,iBAAJ,CAAsB,cAAtB,CAFtC;AAGpBP,MAAAA,OAAO,EAAEA,OAHW;AAIpBQ,MAAAA,IAAI,EAAEd,GAAG,CAACe,YAJU;AAKpBC,MAAAA,IAAI,EAAEhB,GAAG,CAACiB,QAAJ,IAAgBjB,GAAG,CAACe;AALN,KAAR,CAAd;AAOD,GAlBD,CAkBE,OAAOG,GAAP,EAAY,CAAE;;AAEhB,SAAOjB,KAAP;AACD,CA5BD","sourcesContent":["'use strict';\n\nvar extend = require('xtend');\n\nmodule.exports = function(req) {\n  var xhr = req.xhr;\n  var props = {request: req, xhr: xhr};\n\n  // Try to create the response from the request. If the request was aborted,\n  // accesssing properties of the XHR may throw an error, so we wrap in a\n  // try/catch.\n  try {\n    var lines, i, m, headers = {};\n    if (xhr.getAllResponseHeaders) {\n      lines = xhr.getAllResponseHeaders().split('\\n');\n      for (i = 0; i < lines.length; i++) {\n        if ((m = lines[i].match(/\\s*([^\\s]+):\\s+([^\\s]+)/))) {\n          headers[m[1]] = m[2];\n        }\n      }\n    }\n\n    props = extend(props, {\n      status: xhr.status,\n      contentType: xhr.contentType || (xhr.getResponseHeader && xhr.getResponseHeader('Content-Type')),\n      headers: headers,\n      text: xhr.responseText,\n      body: xhr.response || xhr.responseText\n    });\n  } catch (err) {}\n\n  return props;\n};\n"]},"metadata":{},"sourceType":"script"}