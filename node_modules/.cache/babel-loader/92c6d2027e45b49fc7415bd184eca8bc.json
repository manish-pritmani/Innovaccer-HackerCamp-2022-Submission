{"ast":null,"code":"'use strict';\n\nvar urllite = require('urllite/lib/core'),\n    once = require('../lib/utils/once');\n\nvar warningShown = false;\nvar supportsXHR = once(function () {\n  return typeof window !== 'undefined' && window !== null && window.XMLHttpRequest && 'withCredentials' in new window.XMLHttpRequest();\n}); // This plugin creates a Microsoft `XDomainRequest` in supporting browsers when\n// the URL being requested is on a different domain. This is necessary to\n// support IE9, which only supports CORS via its proprietary `XDomainRequest`\n// object. We need to check the URL because `XDomainRequest` *doesn't* work for\n// same domain requests (unless your server sends CORS headers).\n// `XDomainRequest` also has other limitations (no custom headers), so we try to\n// catch those and error.\n\nmodule.exports = {\n  createXHR: function (req) {\n    var a, b, k;\n\n    if (typeof window === 'undefined' || window === null) {\n      return;\n    }\n\n    a = urllite(req.url);\n    b = urllite(window.location.href); // Don't do anything for same-domain requests.\n\n    if (!a.host) {\n      return;\n    }\n\n    if (a.protocol === b.protocol && a.host === b.host && a.port === b.port) {\n      return;\n    } // Show a warning if there are custom headers. We do this even in\n    // browsers that won't use XDomainRequest so that users know there's an\n    // issue right away, instead of if/when they test in IE9.\n\n\n    if (!warningShown && req.headers) {\n      for (k in req.headers) {\n        if (req.headers.hasOwnProperty(k)) {\n          warningShown = true;\n\n          if (window && window.console && window.console.warn) {\n            window.console.warn('Request headers are ignored in old IE when using the oldiexdomain plugin.');\n          }\n\n          break;\n        }\n      }\n    } // Don't do anything if we can't do anything (:\n    // Don't do anything if the browser supports proper XHR.\n\n\n    if (window.XDomainRequest && !supportsXHR()) {\n      // We've come this far. Might as well make an XDomainRequest.\n      var xdr = new window.XDomainRequest();\n\n      xdr.setRequestHeader = function () {}; // Ignore request headers.\n\n\n      return xdr;\n    }\n  }\n};","map":{"version":3,"sources":["C:/Users/GodFather/Pictures/Manish_Pritmani_Innovaccer_HackerCamp_2022/project-developed/node_modules/httpplease/plugins/oldiexdomain.js"],"names":["urllite","require","once","warningShown","supportsXHR","window","XMLHttpRequest","module","exports","createXHR","req","a","b","k","url","location","href","host","protocol","port","headers","hasOwnProperty","console","warn","XDomainRequest","xdr","setRequestHeader"],"mappings":"AAAA;;AAEA,IACEA,OAAO,GAAGC,OAAO,CAAC,kBAAD,CADnB;AAAA,IAEEC,IAAI,GAAGD,OAAO,CAAC,mBAAD,CAFhB;;AAIA,IAAIE,YAAY,GAAG,KAAnB;AAEA,IAAIC,WAAW,GAAGF,IAAI,CAAC,YAAW;AAChC,SACE,OAAOG,MAAP,KAAkB,WAAlB,IACAA,MAAM,KAAK,IADX,IAEAA,MAAM,CAACC,cAFP,IAGA,qBAAqB,IAAID,MAAM,CAACC,cAAX,EAJvB;AAMD,CAPqB,CAAtB,C,CASA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAC,MAAM,CAACC,OAAP,GAAiB;AACfC,EAAAA,SAAS,EAAE,UAASC,GAAT,EAAc;AACvB,QAAIC,CAAJ,EAAOC,CAAP,EAAUC,CAAV;;AAEA,QAAI,OAAOR,MAAP,KAAkB,WAAlB,IAAiCA,MAAM,KAAK,IAAhD,EAAsD;AACpD;AACD;;AAEDM,IAAAA,CAAC,GAAGX,OAAO,CAACU,GAAG,CAACI,GAAL,CAAX;AACAF,IAAAA,CAAC,GAAGZ,OAAO,CAACK,MAAM,CAACU,QAAP,CAAgBC,IAAjB,CAAX,CARuB,CAUvB;;AACA,QAAI,CAACL,CAAC,CAACM,IAAP,EAAa;AACX;AACD;;AACD,QAAIN,CAAC,CAACO,QAAF,KAAeN,CAAC,CAACM,QAAjB,IAA6BP,CAAC,CAACM,IAAF,KAAWL,CAAC,CAACK,IAA1C,IAAkDN,CAAC,CAACQ,IAAF,KAAWP,CAAC,CAACO,IAAnE,EAAyE;AACvE;AACD,KAhBsB,CAkBvB;AACA;AACA;;;AACA,QAAI,CAAChB,YAAD,IAAiBO,GAAG,CAACU,OAAzB,EAAkC;AAChC,WAAKP,CAAL,IAAUH,GAAG,CAACU,OAAd,EAAuB;AACrB,YAAIV,GAAG,CAACU,OAAJ,CAAYC,cAAZ,CAA2BR,CAA3B,CAAJ,EAAmC;AACjCV,UAAAA,YAAY,GAAG,IAAf;;AACA,cAAIE,MAAM,IAAIA,MAAM,CAACiB,OAAjB,IAA4BjB,MAAM,CAACiB,OAAP,CAAeC,IAA/C,EAAqD;AACnDlB,YAAAA,MAAM,CAACiB,OAAP,CAAeC,IAAf,CAAoB,2EAApB;AACD;;AACD;AACD;AACF;AACF,KA/BsB,CAiCvB;AACA;;;AACA,QAAIlB,MAAM,CAACmB,cAAP,IAAyB,CAACpB,WAAW,EAAzC,EAA6C;AAC3C;AACA,UAAIqB,GAAG,GAAG,IAAIpB,MAAM,CAACmB,cAAX,EAAV;;AACAC,MAAAA,GAAG,CAACC,gBAAJ,GAAuB,YAAW,CAAE,CAApC,CAH2C,CAGL;;;AACtC,aAAOD,GAAP;AACD;AACF;AA1Cc,CAAjB","sourcesContent":["'use strict';\n\nvar\n  urllite = require('urllite/lib/core'),\n  once = require('../lib/utils/once');\n\nvar warningShown = false;\n\nvar supportsXHR = once(function() {\n  return (\n    typeof window !== 'undefined' &&\n    window !== null &&\n    window.XMLHttpRequest &&\n    'withCredentials' in new window.XMLHttpRequest()\n  );\n});\n\n// This plugin creates a Microsoft `XDomainRequest` in supporting browsers when\n// the URL being requested is on a different domain. This is necessary to\n// support IE9, which only supports CORS via its proprietary `XDomainRequest`\n// object. We need to check the URL because `XDomainRequest` *doesn't* work for\n// same domain requests (unless your server sends CORS headers).\n// `XDomainRequest` also has other limitations (no custom headers), so we try to\n// catch those and error.\nmodule.exports = {\n  createXHR: function(req) {\n    var a, b, k;\n\n    if (typeof window === 'undefined' || window === null) {\n      return;\n    }\n\n    a = urllite(req.url);\n    b = urllite(window.location.href);\n\n    // Don't do anything for same-domain requests.\n    if (!a.host) {\n      return;\n    }\n    if (a.protocol === b.protocol && a.host === b.host && a.port === b.port) {\n      return;\n    }\n\n    // Show a warning if there are custom headers. We do this even in\n    // browsers that won't use XDomainRequest so that users know there's an\n    // issue right away, instead of if/when they test in IE9.\n    if (!warningShown && req.headers) {\n      for (k in req.headers) {\n        if (req.headers.hasOwnProperty(k)) {\n          warningShown = true;\n          if (window && window.console && window.console.warn) {\n            window.console.warn('Request headers are ignored in old IE when using the oldiexdomain plugin.');\n          }\n          break;\n        }\n      }\n    }\n\n    // Don't do anything if we can't do anything (:\n    // Don't do anything if the browser supports proper XHR.\n    if (window.XDomainRequest && !supportsXHR()) {\n      // We've come this far. Might as well make an XDomainRequest.\n      var xdr = new window.XDomainRequest();\n      xdr.setRequestHeader = function() {}; // Ignore request headers.\n      return xdr;\n    }\n  }\n};\n"]},"metadata":{},"sourceType":"script"}